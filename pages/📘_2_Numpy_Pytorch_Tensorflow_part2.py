import os
import streamlit as st
import os
from src.util import check_authentication, install_packages, plot_img, generate_code_file
st.set_page_config(page_title="Test App", layout="wide")

# check_authentication()
install_packages()
st.session_state.authenticated=True
st.session_state.username = "H·ªçc vi√™n"

if st.session_state["authenticated"]:    
    username = st.session_state["username"]
    st.success(f"Xin ch√†o {username}! üì¢üì¢üì¢üì¢üì¢üì¢ Tin n√≥ng: T√≠ch h·ª£p t√≠nh nƒÉng h·ªèi ƒë√°p, debug code v·ªõi AI ü•∞üòçüòò")

    # C·ª≠a s·ªï h∆∞·ªõng d·∫´n ng∆∞·ªùi d√πng
    with st.expander("H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng ·ª©ng d·ª•ng üìó"):
        st.write("""
        ### H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng
        1. Nh·∫•n n√∫t run ƒë·ªÉ ch·∫°y code
        2. Khi ch∆∞∆°ng tr√¨nh ch·∫°y th√†nh c√¥ng, nh·∫•n "H·ªèi AIü§ñ" ƒë·ªÉ gi·∫£i th√≠ch code n·∫øu b·∫°n ch∆∞a hi·ªÉu. ƒê·ªëi v·ªõi l·∫ßn ƒë·∫ßu s·ª≠ d·ª•ng, m·ªôt th√¥ng b√°o "Pop up blocked" xu·∫•t hi·ªán tr√™n
        thanh t√¨m ki·∫øm c·ªßa tr√¨nh duy·ªát, b·∫°n ph·∫£i t√≠ch v√†o "allow for...https://aio2024-string-python.streamlit.app/" ho·∫∑c refresh l·∫°i trang v√† ƒëƒÉng nh·∫≠p l·∫°i ƒë·ªÉ s·ª≠ d·ª•ng t√≠nh nƒÉng n√†y.
        3. N√∫t "Debug AIü§ñ" xu·∫•t hi·ªán khi ch∆∞∆°ng tr√¨nh b·∫°n ch·∫°y c√≥ l·ªói.
        4. K·∫øt qu·∫£ v√† v√≠ d·ª• m√£ s·∫Ω hi·ªÉn th·ªã b√™n d∆∞·ªõi.

        #### L∆∞u √Ω
        - L·∫ßn ƒë·∫ßu ti√™n s·ª≠ d·ª•ng c·∫ßn cho ph√©p tr√¨nh duy·ªát m·ªü c·ª≠a s·ªï m·ªõi nh∆∞ ƒë√£ h∆∞·ªõng d·∫´n ·ªü b∆∞·ªõc 2
        - 1 v√≠ d·ª• ch·ªâ ƒë∆∞·ª£c s·ª≠ d·ª•ng h·ªèi AI m·ªôt l·∫ßn, n·∫øu mu·ªën s·ª≠ d·ª•ng nhi·ªÅu l·∫ßn th√¨ c·∫ßn nh·∫•n n√∫t run tr√™n √¥ ch·ª©a code r·ªìi th·ª±c hi·ªán nh·∫•n n√∫t h·ªèi AI.
        """)

    # current_directory = os.getcwd()
    data_dir = "data/"+username+"/npt/part2/"
    if not os.path.exists(data_dir):
        os.makedirs(data_dir)
    st.markdown("# C√ÅC H√ÄM KH·ªûI T·∫†O NUMPY ARRAY V√Ä PYTORCH/TENSORFLOW TENSOR - PH·∫¶N 2 - AIO 2024")
    st.markdown('''## **1. M√¥ t·∫£**

Khi l·∫≠p tr√¨nh v·ªõi c√°c th∆∞ vi·ªán Numpy, Pytorch, Tensorflow c√≥ m·ªôt s·ªë c√°ch
ƒë·ªÉ nhanh ch√≥ng t·∫°o ra c√°c array v·ªõi gi√° tr·ªã, k√≠ch th∆∞·ªõc kh√°c nhau. Trong
b√†i t·∫≠p n√†y, ch√∫ng ta s·∫Ω t√¨m hi·ªÉu c√°c s·ª≠ d·ª•ng 3 h√†m **zeros**, **ones**,
**full**.

a\) ***zeros***

**zeros** l√† h√†m th·ª±c hi·ªán ch·ª©c nƒÉng t·∫°o array, tensor to√†n gi√° tr·ªã 0
v·ªõi ƒë·∫ßu v√†o l√† k√≠ch th∆∞·ªõc v√† ki·ªÉu d·ªØ li·ªáu ta mu·ªën. C·∫£ 3 th∆∞ vi·ªán ƒë·ªÅu s·ª≠
d·ª•ng h√†m tr√™n, v·ªõi c√∫ ph√°p t∆∞∆°ng t·ª± nhau.''')
    
    plot_img("https://ia800408.us.archive.org/33/items/npt_20240623/d8-zeros.png", "Minh h·ªça v√† c√∫ ph√°p s·ª≠ d·ª•ng h√†m zeros")

    st.markdown('''Nh√¨n chung, h√†m **zeros** ch·ªß y·∫øu d√πng ƒë·ªÉ kh·ªüi t·∫°o m·∫£ng ho·∫∑c tensor v·ªõi
c√°c gi√° tr·ªã 0, th∆∞·ªùng ƒë∆∞·ª£c d√πng trong qu√° tr√¨nh x√¢y d·ª±ng c√°c m√¥ h√¨nh m√°y
h·ªçc v√† th·ª±c hi·ªán c√°c ph√©p to√°n s·ªë h·ªçc.

b\) ***ones***

T∆∞∆°ng t·ª± v·ªõi **zeros**, h√†m **ones** t·∫°o m·∫£ng ch·ª©a to√†n s·ªë 1 v·ªõi ƒë·∫ßu v√†o
l√† k√≠ch th∆∞·ªõc do ng∆∞·ªùi d√πng ch·ªâ ƒë·ªãnh.''')
    
    plot_img("https://ia800408.us.archive.org/33/items/npt_20240623/d8-ones.png", "Minh h·ªça v√† c√∫ ph√°p s·ª≠ d·ª•ng h√†m ones")


    st.markdown('''c\) ***full, fill***

H√†m **full** gi√∫p ch√∫ng ta t·∫°o array, tensor(Pytorch) v·ªõi ph·∫ßn t·ª≠ l√† gi√°
tr·ªã ch·ªâ ƒë·ªãnh, ƒë·∫ßu v√†o c·ªßa h√†m **full** g·ªìm k√≠ch th∆∞·ªõc array v√† gi√° tr·ªã
h·∫±ng s·ªë mu·ªën t·∫°o. Kh√°c v·ªõi hai th∆∞ vi·ªán tr√™n, Tensorflow s·ª≠ d·ª•ng h√†m
**fill**.''')

    plot_img("https://ia800408.us.archive.org/33/items/npt_20240623/d8-full-fill.png", "Minh h·ªça v√† c√∫ ph√°p s·ª≠ d·ª•ng h√†m full/fill")

    st.markdown('''H√†m **full** v·ªõi Numpy, Pytorch hay **fill** v·ªõi Tensorflow gi√∫p t·∫°o
array ho·∫∑c tensor v·ªõi k√≠ch th∆∞·ªõc v√† gi√° tr·ªã ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh, c√≥ √≠ch khi ta
c·∫ßn kh·ªüi t·∫°o c√°c c·∫•u tr√∫c d·ªØ li·ªáu v·ªõi gi√° tr·ªã ƒë·ªìng nh·∫•t.''')

    st.markdown('''## **2. B√†i t·∫≠p**

**C√¢u 1:** H√£y vi·∫øt ch∆∞∆°ng tr√¨nh s·ª≠ d·ª•ng h√†m zeros t·∫°o Numpy array,
Tensorflow tensor, Pytorch tensor ch·ªâ ch·ª©a gi√° tr·ªã l√† s·ªë 0 v·ªõi k√≠ch
th∆∞·ªõc (3, 4)?

**C√¢u 2:** H√£y vi·∫øt ch∆∞∆°ng tr√¨nh s·ª≠ d·ª•ng h√†m ones t·∫°o Numpy array,
Tensorflow tensor, Pytorch tensor ch·ªâ ch·ª©a gi√° tr·ªã l√† s·ªë 1 v·ªõi k√≠ch
th∆∞·ªõc (3, 4)?

**C√¢u 3:** H√£y vi·∫øt ch∆∞∆°ng tr√¨nh t·∫°o Numpy array, Tensorflow tensor,
Pytorch tensor ch·ªâ ch·ª©a gi√° tr·ªã l√† s·ªë 5 v·ªõi k√≠ch th∆∞·ªõc (3, 4)?''')

    st.markdown('''## **3. ƒê√°p √°n**

**C√¢u 1:** ***zeros***

Ch∆∞∆°ng tr√¨nh sau t·∫°o array v·ªõi k√≠ch th∆∞·ªõc (3, 4), ƒë·ªëi v·ªõi th∆∞ vi·ªán Numpy
s·ª≠ d·ª•ng c√∫ ph√°p **np.zeros**, b√™n trong h√†m n√†y ch√∫ng ta truy·ªÅn v√†o k√≠ch
th∆∞·ªõc array ch√∫ng ta mong mu·ªën l√† (3, 4).''')

    ex_1 = '''\
# Numpy code
import numpy as np

# T·∫°o array to√†n s·ªë 0
arr_zeros = np.zeros((3, 4))
print(arr_zeros)
'''
    generate_code_file(ex_1, 'ex_1', data_dir)
    st.markdown('''T∆∞∆°ng t·ª± nh∆∞ th∆∞ vi·ªán Numpy, Pytorch s·ª≠ d·ª•ng c√∫ ph√°p ***torch.zeros***''')
    ex_2 = '''\
#Pytorch code
import torch

# T·∫°o tensor to√†n s·ªë 0
tensor_zeros = torch.zeros((3, 4))
print(tensor_zeros)
'''
    generate_code_file(ex_2, 'ex_2', data_dir)

    st.markdown('''T∆∞∆°ng t·ª±, Tensorflow s·ª≠ d·ª•ng c√∫ ph√°p **tf.zeros**''')
    ex_3 = '''\
# Tensorflow code
import tensorflow as tf

# T·∫°o tensor to√†n s·ªë 0
tensor_zeros = tf.zeros((3, 4))
print(tensor_zeros)'''

    st.markdown('''**C√¢u 2:** ***ones***

Ch∆∞∆°ng tr√¨nh sau t·∫°o array v·ªõi k√≠ch th∆∞·ªõc (3, 4), ƒë·ªëi v·ªõi th∆∞ vi·ªán Numpy
s·ª≠ d·ª•ng c√∫ ph√°p ***np.ones***''')

    generate_code_file(ex_3, 'ex_3', data_dir)
    ex_4 = '''\
# Numpy code
import numpy as np

# T·∫°o array to√†n s·ªë 1
arr_ones = np.ones((3, 4))
print(arr_ones)'''

    st.markdown('''V·ªõi Pytorch v√† Tensorflow c√∫ ph√°p th·ª±c hi·ªán t∆∞∆°ng t·ª± v·ªõi c√∫ ph√°p torch.ones, tf.ones''')

    generate_code_file(ex_4, 'ex_4', data_dir)
    ex_5 = '''\
#PyTorch code
import torch

# T·∫°o tensor to√†n s·ªë 1
tensor_ones = torch.ones((3, 4))
print(tensor_ones)
'''
    generate_code_file(ex_5, 'ex_5', data_dir)

    ex_6 = '''\
#TensorFlow code    
import tensorflow as tf

# T·∫°o tensor to√†n s·ªë 1
tensor_ones = tf.ones((3, 4))
print(tensor_ones)'''
    generate_code_file(ex_6, 'ex_6', data_dir)
    
    st.markdown('''**C√¢u 3:** ***full, fill***

Ch∆∞∆°ng tr√¨nh sau t·∫°o array v·ªõi k√≠ch th∆∞·ªõc (3, 4), gi√° tr·ªã h·∫±ng s·ªë l√† 5.
ƒê·ªëi v·ªõi th∆∞ vi·ªán Numpy s·ª≠ d·ª•ng c√∫ ph√°p ***np.full***''')
    ex_7 = '''\
# Numpy code
import numpy as np

# T·∫°o array to√†n s·ªë 5
arr_full = np.full((3, 4), 5)
print(arr_full)'''
    
    generate_code_file(ex_7, 'ex_7', data_dir)
    
    st.markdown('''T∆∞∆°ng t·ª± nh∆∞ th∆∞ vi·ªán Numpy, Pytorch s·ª≠ d·ª•ng c√∫ ph√°p ***torch.full***''')


    ex_8 = '''\
#Pytorch code
import torch

# T·∫°o tensor to√†n s·ªë 5
tensor_full = torch.full((3, 4), 5)
print(tensor_full)'''

    st.markdown('''Kh√°c v·ªõi hai th∆∞ vi·ªán tr√™n, Tensorflow s·ª≠ d·ª•ng h√†m **fill** ƒë·ªÉ t·∫°o m·ªôt
tensor v·ªõi gi√° tr·ªã ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh.''')

    generate_code_file(ex_8, 'ex_8', data_dir)
    ex_9 = '''\
# Tensorflow code
import tensorflow as tf

# T·∫°o tensor to√†n s·ªë 5
tensor_full = tf.fill((3, 4), 5)
print(tensor_full)'''