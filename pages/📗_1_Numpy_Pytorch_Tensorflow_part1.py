import streamlit as st
import os
from src.util import check_authentication, install_packages, plot_img, generate_code_file
st.set_page_config(page_title="Test App", layout="wide")

# check_authentication()
install_packages()
st.session_state.authenticated=True
st.session_state.username = "H·ªçc vi√™n"
        
# st.set_page_config(page_title="Test App", layout="wide")

# check_authentication()
install_packages()
st.session_state.authenticated=True
st.session_state.username = "H·ªçc vi√™n"
if st.session_state["authenticated"]:    
      username = st.session_state["username"]
      st.success(f"Xin ch√†o {username}! üì¢üì¢üì¢üì¢üì¢üì¢ Tin n√≥ng: T√≠ch h·ª£p t√≠nh nƒÉng h·ªèi ƒë√°p, debug code v·ªõi AI ü•∞üòçüòò")

      # C·ª≠a s·ªï h∆∞·ªõng d·∫´n ng∆∞·ªùi d√πng
      with st.expander("H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng ·ª©ng d·ª•ng üìó"):
            st.write("""
            ### H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng
            1. Nh·∫•n n√∫t run ƒë·ªÉ ch·∫°y code
            2. Khi ch∆∞∆°ng tr√¨nh ch·∫°y th√†nh c√¥ng, nh·∫•n "H·ªèi AIü§ñ" ƒë·ªÉ gi·∫£i th√≠ch code n·∫øu b·∫°n ch∆∞a hi·ªÉu. ƒê·ªëi v·ªõi l·∫ßn ƒë·∫ßu s·ª≠ d·ª•ng, m·ªôt th√¥ng b√°o "Pop up blocked" xu·∫•t hi·ªán tr√™n
            thanh t√¨m ki·∫øm c·ªßa tr√¨nh duy·ªát, b·∫°n ph·∫£i t√≠ch v√†o "allow for...https://aio2024-string-python.streamlit.app/" ho·∫∑c refresh l·∫°i trang v√† ƒëƒÉng nh·∫≠p l·∫°i ƒë·ªÉ s·ª≠ d·ª•ng t√≠nh nƒÉng n√†y.
            3. N√∫t "Debug AIü§ñ" xu·∫•t hi·ªán khi ch∆∞∆°ng tr√¨nh b·∫°n ch·∫°y c√≥ l·ªói.
            4. K·∫øt qu·∫£ v√† v√≠ d·ª• m√£ s·∫Ω hi·ªÉn th·ªã b√™n d∆∞·ªõi.

            #### L∆∞u √Ω
            - L·∫ßn ƒë·∫ßu ti√™n s·ª≠ d·ª•ng c·∫ßn cho ph√©p tr√¨nh duy·ªát m·ªü c·ª≠a s·ªï m·ªõi nh∆∞ ƒë√£ h∆∞·ªõng d·∫´n ·ªü b∆∞·ªõc 2
            - 1 v√≠ d·ª• ch·ªâ ƒë∆∞·ª£c s·ª≠ d·ª•ng h·ªèi AI m·ªôt l·∫ßn, n·∫øu mu·ªën s·ª≠ d·ª•ng nhi·ªÅu l·∫ßn th√¨ c·∫ßn nh·∫•n n√∫t run tr√™n √¥ ch·ª©a code r·ªìi th·ª±c hi·ªán nh·∫•n n√∫t h·ªèi AI.
            """)

      # current_directory = os.getcwd()
      data_dir = "data/"+username+"/npt/part1/"
      if not os.path.exists(data_dir):
            os.makedirs(data_dir)

      st.markdown("# NUMPY ARRAY V√Ä PYTORCH/TENSORFLOW TENSOR - PH·∫¶N 1 - AIO 2024")
      st.markdown('''## **1. M√¥ t·∫£**

Array trong Numpy v√† Tensor trong c√°c th∆∞ vi·ªán Pytorch, Tensorflow l√†
nh·ªØng th√†nh ph·∫ßn n·ªÅn t·∫£ng c·ªët l√µi cho vi·ªác t√≠nh to√°n c·ªßa c√°c th∆∞ vi·ªán
n√†y. Trong ƒë√≥:

-   **Array** l√† m·ªôt c·∫•u tr√∫c d·ªØ li·ªáu ƒëa chi·ªÅu m·∫°nh m·∫Ω, gi√∫p l∆∞u tr·ªØ v√†
    th·ª±c hi·ªán c√°c ph√©p to√°n to√°n h·ªçc tr√™n d·ªØ li·ªáu s·ªë. Array c√≥ th·ªÉ l√†
    m·∫£ng 0 chi·ªÅu (scalar), m·∫£ng m·ªôt chi·ªÅu (vector), m·∫£ng hai chi·ªÅu (ma
    tr·∫≠n), ho·∫∑c nhi·ªÅu chi·ªÅu h∆°n.

-   **Tensor trong Pytorch v√† Tensorflow** l√† m·ªôt c·∫•u tr√∫c d·ªØ li·ªáu nhi·ªÅu
    chi·ªÅu, t∆∞∆°ng t·ª± nh∆∞ array trong Numpy, nh∆∞ng ƒë∆∞·ª£c thi·∫øt k·∫ø ƒë·ªÉ t∆∞∆°ng
    th√≠ch v·ªõi h·ªçc s√¢u v√† t√≠nh to√°n song song, ƒë·∫∑c bi·ªát l√† tr√™n c√°c thi·∫øt
    b·ªã nh∆∞ GPU v√† TPU. Trong Pytorch v√† Tensorflow, tensors l√† ƒë∆°n v·ªã c∆°
    b·∫£n ƒë·ªÉ l∆∞u tr·ªØ v√† x·ª≠ l√Ω d·ªØ li·ªáu.

C√≥ nhi·ªÅu c√°ch ƒë·ªÉ t·∫°o tensor (hay array trong Nympy), ta c√≥ th·ªÉ s·ª≠ d·ª•ng
c√∫ ph√°p sau ƒë√¢y ƒë·ªÉ kh·ªüi t·∫°o ch√∫ng t·ª´ list Python.''')
      plot_img('https://ia800408.us.archive.org/33/items/npt_20240623/d7array.png', "Minh h·ªça inner product")
      
      st.markdown('''
Khi l√†m vi·ªác v·ªõi c·∫•u tr√∫c d·ªØ li·ªáu tensor, ta c√≥ th·ªÉ ki·ªÉm tra thu·ªôc t√≠nh
c·ªßa ch√∫ng th√¥ng qua m·ªôt s·ªë ph∆∞∆°ng th·ª©c sau:

-   **shape** cho bi·∫øt k√≠ch th∆∞·ªõc c·ªßa m·∫£ng ho·∫∑c tensor, t·ª©c l√† s·ªë ph·∫ßn
    t·ª≠ trong m·ªói chi·ªÅu c·ªßa ch√∫ng.

-   **dtype** cho bi·∫øt ki·ªÉu d·ªØ li·ªáu c·ªßa c√°c ph·∫ßn t·ª≠ trong m·∫£ng ho·∫∑c
    tensor.

-   **type** cho bi·∫øt ki·ªÉu c·ªßa ƒë·ªëi t∆∞·ª£ng m·∫£ng ho·∫∑c tensor.

-   **device** ch·ªâ c√≥ ·ªü trong Pytorch v√† Tensorflow, v√† n√≥ cho bi·∫øt n∆°i
    l∆∞u tr·ªØ tensor, c√≥ th·ªÉ l√† CPU ho·∫∑c GPU.''')
    
      st.markdown('''## **2. B√†i t·∫≠p**

**C√¢u 1:** H√£y vi·∫øt ch∆∞∆°ng tr√¨nh t·∫°o Numpy array, Tensorflow tensor,
Pytorch tensor t·ª´ danh s√°ch 1 chi·ªÅu?

**C√¢u 2:** H√£y vi·∫øt ch∆∞∆°ng tr√¨nh t·∫°o Numpy array, Tensorflow tensor,
Pytorch tensor t·ª´ danh s√°ch 2 chi·ªÅu. Sau ƒë√≥ th·ª±c hi·ªán ki·ªÉm tra thu·ªôc
t√≠nh shape, dtype, type, device t·ª´ c√°c array, tensor v·ª´a t·∫°o ?

**3. ƒê√°p √°n**

C√≥ nhi·ªÅu c√°ch kh√°c nhau ƒë·ªÉ ta t·∫°o array hay tensor. C√°ch ƒë·∫ßu ti√™n, ta
t·∫°o ch√∫ng t·ª´ list-ki·ªÉu d·ªØ li·ªáu quen thu·ªôc trong Python.''')
      ex_1 = '''\
import numpy as np
import torch
import tensorflow as tf

# T·∫°o m·ªôt danh s√°ch 1 chi·ªÅu
list_1D = [1, 2, 3, 4, 5, 6, 7, 8, 9]

# T·∫°o m·ªôt m·∫£ng 1 chi·ªÅu t·ª´ danh s√°ch
arr_1D = np.array(list_1D)
print("M·∫£ng 1 chi·ªÅu NumPy:\\n", arr_1D, type(arr_1D))

# T·∫°o m·ªôt tensor PyTorch t·ª´ danh s√°ch
tensor_1D_pt = torch.tensor(list_1D)
print("Tensor PyTorch 1 chi·ªÅu:\\n", tensor_1D_pt)

# T·∫°o m·ªôt tensor TensorFlow t·ª´ danh s√°ch
tensor_1D_tf = tf.convert_to_tensor(list_1D)
print("Tensor TensorFlow 1 chi·ªÅu:\\n", tensor_1D_tf)'''

      generate_code_file(ex_1, 'ex_1', data_dir)
      
      st.markdown('''V√≠ d·ª• tr√™n th·ª±c hi·ªán t·∫°o array, tensor t·ª´ m·ªôt list Python. ƒê·ªÉ t·∫°o array
ch√∫ng ta d√πng c√∫ ph√°p **np.array(list_1D)**, v·ªõi pytorch th√¨ ta d√πng
**torch.tensor(list_1D)** v√† v·ªõi Tensorflow ta d√πng\
**tf.convert_to_tensor(list_1D)** ho·∫∑c **tf.constant(list_1D)**.\
ƒê·ªëi v·ªõi vi·ªác t·∫°o array, tensor t·ª´ list 2D, ch√∫ng ta c≈©ng th·ª±c hi·ªán t∆∞∆°ng
t·ª± c√°ch tr√™n, V√≠ d·ª• Numpy:''')
      
      ex_2 = '''\
# NumPy code
import numpy as np
# T·∫°o m·ªôt danh s√°ch 2 chi·ªÅu
list_2D = [[1, 2, 3], 
           [4, 5, 6], 
           [7, 8, 9]]
# T·∫°o m·ªôt m·∫£ng 2 chi·ªÅu
arr_2D = np.array(list_2D)
# Ki·ªÉm tra h√¨nh d·∫°ng, ki·ªÉu d·ªØ li·ªáu v√† lo·∫°i 
print("H√¨nh d·∫°ng c·ªßa m·∫£ng: ", arr_2D.shape)
print("Ki·ªÉu d·ªØ li·ªáu c·ªßa m·∫£ng: ", arr_2D.dtype)
print("Lo·∫°i c·ªßa m·∫£ng: ", type(arr_2D))
print("M·∫£ng:\\n", arr_2D)
'''
      generate_code_file(ex_2, 'ex_2', data_dir)
      st.markdown('''Trong ƒëo·∫°n m√£ Numpy tr√™n, ch√∫ng ta b·∫Øt ƒë·∫ßu b·∫±ng vi·ªác t·∫°o ra m·ªôt danh
s√°ch 2D **(list_2D)** ƒë·∫°i di·ªán cho m·ªôt ma tr·∫≠n c√≥ 3 h√†ng v√† 3 c·ªôt. Sau
ƒë√≥, ch√∫ng ta s·ª≠ d·ª•ng Numpy ƒë·ªÉ chuy·ªÉn danh s√°ch n√†y th√†nh m·ªôt m·∫£ng 2
chi·ªÅu **(arr_2D)**. D√≤ng m√£ ti·∫øp theo s·ª≠ d·ª•ng c√°c h√†m t√≠ch h·ª£p trong
Numpy ƒë·ªÉ in ra h√¨nh d·∫°ng (**shape**), ki·ªÉu d·ªØ li·ªáu (**dtype**), v√† ki·ªÉu
c·ªßa m·∫£ng (**type**). Cu·ªëi c√πng, ch√∫ng ta in ra n·ªôi dung c·ªßa m·∫£ng ƒë·ªÉ ki·ªÉm
tra k·∫øt qu·∫£.

V√≠ d·ª• Pytorch:''')
      ex_3 = '''\
# PyTorch code
import torch

# T·∫°o m·ªôt danh s√°ch 2 chi·ªÅu
list_2D = [[1, 2, 3], 
           [4, 5, 6], 
           [7, 8, 9]]
# T·∫°o m·ªôt tensor 2 chi·ªÅu
tensor_2D_pt = torch.tensor(list_2D)

# Ki·ªÉm tra h√¨nh d·∫°ng, ki·ªÉu d·ªØ li·ªáu, lo·∫°i, thi·∫øt b·ªã l∆∞u tr·ªØ c·ªßa tensor
print("H√¨nh d·∫°ng c·ªßa tensor: ", tensor_2D_pt.shape)
print("Ki·ªÉu d·ªØ li·ªáu c·ªßa tensor: ", tensor_2D_pt.dtype)
print("Lo·∫°i c·ªßa tensor: ", type(tensor_2D_pt))
print("Thi·∫øt b·ªã l∆∞u tr·ªØ c·ªßa tensor: ", tensor_2D_pt.device)
print("Tensor:\\n", tensor_2D_pt)
'''
      generate_code_file(ex_3, 'ex_3', data_dir)
      
      st.markdown('''Trong ƒëo·∫°n m√£ Pytorch tr√™n, ch√∫ng ta b·∫Øt ƒë·∫ßu b·∫±ng c√°ch t·∫°o m·ªôt danh s√°ch
2D (**list_2D**) ƒë·∫°i di·ªán cho ma tr·∫≠n 3x3. Sau ƒë√≥, ch√∫ng ta s·ª≠ d·ª•ng
Pytorch ƒë·ªÉ chuy·ªÉn ƒë·ªïi danh s√°ch n√†y th√†nh tensor 2 chi·ªÅu
(**tensor_2D_pt**).

D√≤ng m√£ ti·∫øp theo s·ª≠ d·ª•ng c√°c thu·ªôc t√≠nh t√≠ch h·ª£p trong Pytorch ƒë·ªÉ in ra
h√¨nh d·∫°ng (**shape**), ki·ªÉu d·ªØ li·ªáu (**dtype**), ki·ªÉu c·ªßa tensor
(**type**), v√† thi·∫øt b·ªã l∆∞u tr·ªØ c·ªßa tensor (**device**). Cu·ªëi c√πng,
ch√∫ng ta in ra n·ªôi dung c·ªßa tensor ƒë·ªÉ ki·ªÉm tra k·∫øt qu·∫£.

V√≠ d·ª• Tensorflow:''')
      ex_4 = '''\
import tensorflow as tf

# T·∫°o m·ªôt danh s√°ch 2 chi·ªÅu
list_2D = [[1, 2, 3], 
           [4, 5, 6], 
           [7, 8, 9]]
# T·∫°o m·ªôt tensor 2 chi·ªÅu t·ª´ danh s√°ch
tensor_2D_tf = tf.convert_to_tensor(list_2D)

# Ki·ªÉm tra h√¨nh d·∫°ng, ki·ªÉu d·ªØ li·ªáu, lo·∫°i, 
# v√† thi·∫øt b·ªã m√† tensor ƒë∆∞·ª£c l∆∞u tr·ªØ
print("H√¨nh d·∫°ng c·ªßa tensor: ", tensor_2D_tf.shape)
print("Ki·ªÉu d·ªØ li·ªáu c·ªßa tensor: ", tensor_2D_tf.dtype)
print("Lo·∫°i c·ªßa tensor: ", type(tensor_2D_tf))
print("Thi·∫øt b·ªã m√† tensor ƒë∆∞·ª£c l∆∞u tr·ªØ: ", tensor_2D_tf.device)
print(tensor_2D_tf)
'''
      generate_code_file(ex_4, 'ex_4', data_dir)
      st.markdown('''T∆∞∆°ng t·ª± nh∆∞ Pytorch, trong ƒëo·∫°n m√£ Tensorflow tr√™n, ch√∫ng ta b·∫Øt ƒë·∫ßu
b·∫±ng c√°ch t·∫°o m·ªôt danh s√°ch 2D (**list_2D**) ƒë·∫°i di·ªán cho ma tr·∫≠n 3x3.
Sau ƒë√≥, ch√∫ng ta s·ª≠ d·ª•ng Tensorflow ƒë·ªÉ chuy·ªÉn ƒë·ªïi danh s√°ch n√†y th√†nh
m·ªôt tensor 2 chi·ªÅu (**tensor_2D_tf**) b·∫±ng h√†m
**tf.convert_to_tensor()**.

D√≤ng m√£ ti·∫øp theo s·ª≠ d·ª•ng c√°c thu·ªôc t√≠nh t√≠ch h·ª£p trong Tensorflow ƒë·ªÉ in
ra h√¨nh d·∫°ng (**shape**), ki·ªÉu d·ªØ li·ªáu (**dtype**), ki·ªÉu c·ªßa tensor
(**type**), v√† thi·∫øt b·ªã l∆∞u tr·ªØ c·ªßa tensor (**device**). Cu·ªëi c√πng,
ch√∫ng ta in ra n·ªôi dung c·ªßa tensor ƒë·ªÉ ki·ªÉm tra k·∫øt qu·∫£.''')