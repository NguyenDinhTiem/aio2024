import streamlit as st
import os
from aio_code_editor import ui, st_connect_data
import textwrap

st.set_page_config(page_title="Test App", layout="wide")

if "authenticated" not in st.session_state:
    st.session_state["authenticated"]=False

if not st.session_state["authenticated"]:
    col1, col2, col3 = st.columns([1, 2, 1])
    
    with col2:
        st_connect_data.login_form(
            create_username_placeholder="T·∫°o t√™n ƒëƒÉng nh·∫≠p c·ªßa b·∫°n, v√≠ d·ª• 'nguyenvana'",
            create_password_placeholder="ƒê·∫∑t m·∫≠t kh·∫©u c·ªßa b·∫°n",
            guest_submit_label="Kh√°ch ƒëƒÉng nh·∫≠p")


if st.session_state["authenticated"]:    
    username = st.session_state["username"]
    st.success(f"Xin ch√†o {username}! üì¢üì¢üì¢üì¢üì¢üì¢ Tin n√≥ng: T√≠ch h·ª£p t√≠nh nƒÉng h·ªèi ƒë√°p, debug code v·ªõi AI ü•∞üòçüòò")
    
    # C·ª≠a s·ªï h∆∞·ªõng d·∫´n ng∆∞·ªùi d√πng
    with st.expander("H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng ·ª©ng d·ª•ng üìó"):
        st.write("""
        ### H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng
        1. Nh·∫•n n√∫t run ƒë·ªÉ ch·∫°y code
        2. Khi ch∆∞∆°ng tr√¨nh ch·∫°y th√†nh c√¥ng, nh·∫•n "H·ªèi AIü§ñ" ƒë·ªÉ gi·∫£i th√≠ch code n·∫øu b·∫°n ch∆∞a hi·ªÉu. ƒê·ªëi v·ªõi l·∫ßn ƒë·∫ßu s·ª≠ d·ª•ng, m·ªôt th√¥ng b√°o "Pop up blocked" xu·∫•t hi·ªán tr√™n
        thanh t√¨m ki·∫øm c·ªßa tr√¨nh duy·ªát, b·∫°n ph·∫£i t√≠ch v√†o "allow for...https://aio2024-string-python.streamlit.app/" ho·∫∑c refresh l·∫°i trang v√† ƒëƒÉng nh·∫≠p l·∫°i ƒë·ªÉ s·ª≠ d·ª•ng t√≠nh nƒÉng n√†y.
        3. N√∫t "Debug AIü§ñ" xu·∫•t hi·ªán khi ch∆∞∆°ng tr√¨nh b·∫°n ch·∫°y c√≥ l·ªói.
        4. K·∫øt qu·∫£ v√† v√≠ d·ª• m√£ s·∫Ω hi·ªÉn th·ªã b√™n d∆∞·ªõi.

        #### L∆∞u √Ω
        - L·∫ßn ƒë·∫ßu ti√™n s·ª≠ d·ª•ng c·∫ßn cho ph√©p tr√¨nh duy·ªát m·ªü c·ª≠a s·ªï m·ªõi nh∆∞ ƒë√£ h∆∞·ªõng d·∫´n ·ªü b∆∞·ªõc 2
        - 1 v√≠ d·ª• ch·ªâ ƒë∆∞·ª£c s·ª≠ d·ª•ng h·ªèi AI m·ªôt l·∫ßn, n·∫øu mu·ªën s·ª≠ d·ª•ng nhi·ªÅu l·∫ßn th√¨ c·∫ßn nh·∫•n n√∫t run tr√™n √¥ ch·ª©a code r·ªìi th·ª±c hi·ªán nh·∫•n n√∫t h·ªèi AI.
        """)
    
    # current_directory = os.getcwd()
    data_dir = "data/"+username+"/string/"
    if not os.path.exists(data_dir):
        os.makedirs(data_dir)
    st.button("ƒêƒÉng xu·∫•t", on_click=st.session_state.clear)
    
    st.markdown("# STRING IN PYTHON - AIO 2024")
    
    
    st.markdown(r"""## 1. Gi·ªõi thi·ªáu v·ªÅ String""" )
    st.markdown("""String l√† m·ªôt ki·ªÉu d·ªØ li·ªáu trong Python ƒë∆∞·ª£c bao quanh b·ªüi d·∫•u ngo·∫∑c k√©p ho·∫∑c c·∫∑p d·∫•u nh√°y ƒë∆°n, c·∫∑p 3 d·∫•u nh√°y.""")
    ex_1 = textwrap.dedent('''\
    #ai vietnam
    print("AI VIETNAM")
    print('AI VIETNAM')
    print("""
    This is a comment
    written in
    more than just one line
    """)
    ''')
    key = "ex_1"
    file_name = data_dir+key+".py"
    result, code_ex, key = ui.code_io(ex_1, key=key, file_name=file_name, type_out="python", show_now=True)
    ui.ai(result, code_ex, key)
    st.write(st.session_state)
    
    st.markdown(r"""## 2. Kh·ªüi t·∫°o String""" )
    
    st.markdown(r"""### 2.1 G√°n gi√° tr·ªã string cho m·ªôt bi·∫øn""")
    st.markdown("""Khi ch√∫ng ta t·∫°o m·ªôt string m√† kh√¥ng d√πng l·ªánh print ƒë·ªÉ hi·ªÉn th·ªã n√≥ hay g√°n n√≥ v√†o b·∫•t k·ª≥ bi·∫øn n√†o th√¨ khi ch·∫°y ch∆∞∆°ng tr√¨nh Python s·∫Ω b·ªè qua n√≥ v√† coi n√≥ nh∆∞ l√† comment.
                ƒê·ªÉ t·∫°o m·ªôt bi·∫øn string, ta g√°n string cho bi·∫øn ƒë√≥ b·ªüi d·∫•u b·∫±ng.""")
    
    ex_21 = textwrap.dedent('''\
    #ai vietnam
    name = "Tom"
    print(name)
    ''')
    key = "ex_21"
    file_name = data_dir+key+".py"
    result, code_ex, key = ui.code_io(ex_21, key=key, file_name=file_name, type_out="python", show_now=True)
    ui.ai(result, code_ex, key)

    st.markdown(r"""### 2.2 Index trong string""")
    st.markdown("""String l√† m·ªôt t·∫≠p h·ª£p c√°c k√Ω t·ª± ƒë∆∞·ª£c ƒë√°nh s·ªë th·ª© t·ª± (index) b·∫Øt ƒë·∫ßu t·ª´ 0. 
                Ta c√≥ th·ªÉ truy c·∫≠p v√† thao t√°c v·ªõi t·ª´ng k√Ω t·ª± trong chu·ªói b·∫±ng c√°ch s·ª≠ d·ª•ng ch·ªâ s·ªë c·ªßa n√≥.
                Ch·ªâ s·ªë √¢m c≈©ng c√≥ th·ªÉ ƒë∆∞·ª£c s·ª≠ d·ª•ng, v·ªõi -1 l√† ch·ªâ s·ªë c·ªßa k√Ω t·ª± cu·ªëi c√πng.""")
    ex_22 = textwrap.dedent('''\
    #ai vietnam
    name = "AI VIETNAM"
    print(name[0])
    print(name[5])
    print(name[-1])
    ''')
    key = "ex_22"
    file_name = data_dir+key+".py"
    result, code_ex, key = ui.code_io(ex_22, key=key, file_name=file_name, type_out="python", show_now=True)
    ui.ai(result, code_ex, key)

    st.markdown("""Ch√∫ng ta c≈©ng c√≥ th·ªÉ duy·ªát t·ª´ng ph·∫ßn t·ª≠ trong string v·ªõi v√≤ng l·∫∑p for.""")
    ex_23 = textwrap.dedent('''\
    #ai vietnam
    fruit = 'banana'
    for i in fruit:
        print(i)
    ''')
    key = "ex_23"
    file_name = data_dir+key+".py"
    result, code_ex, key = ui.code_io(ex_23, key=key, file_name=file_name, type_out="python", show_now=True)
    ui.ai(result, code_ex, key)

    st.markdown(r"""### 2.3 Slicing""")
    st.markdown(r"""Slicing string trong Python l√† m·ªôt ph∆∞∆°ng ph√°p m·∫°nh m·∫Ω v√† linh ho·∫°t ƒë·ªÉ tr√≠ch xu·∫•t c√°c ph·∫ßn c·ª• th·ªÉ c·ªßa chu·ªói. 
                B·∫±ng c√°ch s·ª≠ d·ª•ng c√∫ ph√°p s[start:end:step], b·∫°n c√≥ th·ªÉ ch·ªçn ra m·ªôt ƒëo·∫°n con t·ª´ chu·ªói g·ªëc, n∆°i start l√† ch·ªâ s·ªë b·∫Øt ƒë·∫ßu,
                end l√† ch·ªâ s·ªë k·∫øt th√∫c (kh√¥ng bao g·ªìm), v√† step l√† kho·∫£ng c√°ch gi·ªØa c√°c ch·ªâ s·ªë. Slicing cho ph√©p:
                
* L·∫•y m·ªôt ƒëo·∫°n chu·ªói con t·ª´ v·ªã tr√≠ start ƒë·∫øn end (kh√¥ng bao g·ªìm).

* B·ªè qua m·ªôt s·ªë l∆∞·ª£ng k√Ω t·ª± x√°c ƒë·ªãnh b·∫±ng c√°ch s·ª≠ d·ª•ng step.

* ƒê·∫£o ng∆∞·ª£c chu·ªói b·∫±ng c√°ch s·ª≠ d·ª•ng step √¢m.

* Tr√≠ch xu·∫•t c√°c ph·∫ßn t·ª≠ t·ª´ cu·ªëi chu·ªói b·∫±ng ch·ªâ s·ªë √¢m.""")
    
    ex_24 = textwrap.dedent('''\
    #ai vietnam
    b = "Hello, World!"
    print("b[2:5]=", b[2:5])
    print("b[:5]=", b[:5])
    print("b[2:]=",b[2:])
    print("b[-5:-2]=",b[-5:-2])                                                    
    ''')
    key = "ex_24"
    file_name = data_dir+key+".py"
    result, code_ex, key = ui.code_io(ex_24, key=key, file_name=file_name, type_out="python", show_now=True)
    ui.ai(result, code_ex, key)

    st.markdown(r"""Qua c√°c v√≠ d·ª• tr√™n ch√∫ng ta c√≥ th·ªÉ th·∫•y slicing r·∫•t h·ªØu √≠ch trong qu√° tr√¨nh x·ª≠ l√Ω string v√† ta t√≥m g·ªçn l·∫°i nh∆∞ sau:

* Sclicing gi√∫p truy xu·∫•t d·ªÖ d√†ng c√°c ph·∫ßn c·ªßa chu·ªói m√† kh√¥ng c·∫ßn l·∫∑p qua t·ª´ng k√Ω t·ª±.
* TƒÉng c∆∞·ªùng kh·∫£ nƒÉng x·ª≠ l√Ω chu·ªói v√† thao t√°c d·ªØ li·ªáu vƒÉn b·∫£n trong l·∫≠p tr√¨nh Python.
* Gi√∫p vi·∫øt m√£ ng·∫Øn g·ªçn, tr·ª±c quan v√† d·ªÖ hi·ªÉu h∆°n.

D∆∞·ªõi ƒë√¢y l√† b·∫£ng t·ªïng h·ª£p l·∫°i c√°c c√°ch s·ª≠ d·ª•ng slicing:

| Bi·ªÉu th·ª©c         | M√¥ t·∫£                                                        | V√≠ d·ª•                                                                 |
|-------------------|--------------------------------------------------------------|-----------------------------------------------------------------------|
| `s[start:end]`    | Tr·∫£ v·ªÅ chu·ªói con t·ª´ v·ªã tr√≠ `start` ƒë·∫øn `end` (kh√¥ng bao g·ªìm) | ```python s = "Hello World"; s[0:5] # "Hello" ```                     |
| `s[start:]`       | Tr·∫£ v·ªÅ chu·ªói con t·ª´ v·ªã tr√≠ `start` ƒë·∫øn h·∫øt chu·ªói             | ```python s = "Hello World"; s[6:] # "World" ```                      |
| `s[:end]`         | Tr·∫£ v·ªÅ chu·ªói con t·ª´ ƒë·∫ßu chu·ªói ƒë·∫øn v·ªã tr√≠ `end` (kh√¥ng bao g·ªìm)| ```python s = "Hello World"; s[:5] # "Hello" ```                      |
| `s[start:end:step]` | Tr·∫£ v·ªÅ chu·ªói con t·ª´ v·ªã tr√≠ `start` ƒë·∫øn `end` (kh√¥ng bao g·ªìm), l·∫•y m·ªói `step` k√Ω t·ª± | ```python s = "Hello World"; s[0:5:2] # "Hlo" ```                      |
| `s[::-1]`         | ƒê·∫£o ng∆∞·ª£c chu·ªói                                             | ```python s = "Hello World"; s[::-1] # "dlroW olleH" ```              |
| `s[start:end:-1]` | Tr·∫£ v·ªÅ chu·ªói con t·ª´ v·ªã tr√≠ `start` ƒë·∫øn `end` (kh√¥ng bao g·ªìm), theo th·ª© t·ª± ng∆∞·ª£c l·∫°i | ```python s = "Hello World"; s[5:0:-1] # "olleH" ```                 |
| `s[-start:-end]`  | Tr·∫£ v·ªÅ chu·ªói con v·ªõi c√°c v·ªã tr√≠ b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c t·ª´ cu·ªëi chu·ªói | ```python s = "Hello World"; s[-5:-1] # "Worl" ```                    |
| `s[:end:-1]`      | Tr·∫£ v·ªÅ chu·ªói con t·ª´ cu·ªëi chu·ªói ƒë·∫øn v·ªã tr√≠ `end` theo th·ª© t·ª± ng∆∞·ª£c l·∫°i | ```python s = "Hello World"; s[:5:-1] # "dlroW " ```               |
| `s[start::step]`  | Tr·∫£ v·ªÅ chu·ªói con t·ª´ v·ªã tr√≠ `start` ƒë·∫øn h·∫øt chu·ªói, l·∫•y m·ªói `step` k√Ω t·ª± | ```python s = "Hello World"; s[1::2] # "el ol" ```                     |
| `s[::step]`       | Tr·∫£ v·ªÅ chu·ªói con t·ª´ ƒë·∫ßu ƒë·∫øn cu·ªëi chu·ªói, l·∫•y m·ªói `step` k√Ω t·ª± | ```python s = "Hello World"; s[::2] # "HloWrd" ```                    |
| `s[-start:]`      | Tr·∫£ v·ªÅ chu·ªói con t·ª´ v·ªã tr√≠ `-start` (t·ª´ cu·ªëi) ƒë·∫øn h·∫øt chu·ªói  | ```python s = "Hello World"; s[-5:] # "World" ```                     |
| `s[:-end]`        | Tr·∫£ v·ªÅ chu·ªói con t·ª´ ƒë·∫ßu chu·ªói ƒë·∫øn v·ªã tr√≠ `-end` (t·ª´ cu·ªëi)    | ```python s = "Hello World"; s[:-5] # "Hello " ```                    |""")
    
    st.markdown(r"""## 3. Ph√©p + v√† * string""" )
    st.markdown("""Ph√©p c·ªông (+) v√† ph√©p nh√¢n (*) ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ th·ª±c hi·ªán c√°c ph√©p to√°n tr√™n string.
                Ph√©p c·ªông n·ªëi c√°c string l·∫°i v·ªõi nhau, trong khi ph√©p nh√¢n l·∫∑p l·∫°i string m·ªôt s·ªë l·∫ßn.""")
    ex_31 = textwrap.dedent('''\
    #ai vietnam
    # Ph√©p c·ªông chu·ªói
    string_1 = "Hello"
    string_2 = "World"
    result_1 = string_1 + " " + string_2
    print("string_1 + string_2 = ", result_1) 

    # Ph√©p nh√¢n chu·ªói
    string_3 = "Hello"
    result_2 = string_3 * 3
    print("string_3 * 3 = ", result_2)                                     
    ''')
    key = "ex_31"
    file_name = data_dir+key+".py"
    result, code_ex, key = ui.code_io(ex_31, key=key, file_name=file_name, type_out="python", show_now=True)
    ui.ai(result, code_ex, key)

    st.markdown("""Tuy nhi√™n, kh√¥ng th·ªÉ th·ª±c hi·ªán c√°c ph√©p t√≠nh n√†y tr√™n c√°c chu·ªói ch·ª©a c√°c k√Ω t·ª± kh√¥ng ph·∫£i s·ªë.""")
    ex_32 = textwrap.dedent('''\
    #ai vietnam
    number_string = "123"
    result_3 = number_string + 456                                 
    ''')
    key = "ex_32"
    file_name = data_dir+key+".py"
    result, code_ex, key = ui.code_io(ex_32, key=key, file_name=file_name, type_out="python", show_now=True)
    ui.ai(result, code_ex, key)

    st.markdown(r"""## 4. Fstring""" )
    st.markdown("""F-string (formatted string literals) l√† m·ªôt c√°ch ti·ªán l·ª£i v√† d·ªÖ ƒë·ªçc ƒë·ªÉ ƒë·ªãnh d·∫°ng chu·ªói trong Python,
                ƒë∆∞·ª£c gi·ªõi thi·ªáu t·ª´ Python 3.6. B·∫±ng c√°ch ƒë·∫∑t ch·ªØ 'f' ho·∫∑c 'F' tr∆∞·ªõc d·∫•u ngo·∫∑c k√©p m·ªü c·ªßa chu·ªói, 
                ta c√≥ th·ªÉ nh√∫ng bi·ªÉu th·ª©c Python tr·ª±c ti·∫øp b√™n trong chu·ªói s·ª≠ d·ª•ng c·∫∑p d·∫•u ngo·∫∑c nh·ªçn {}. 
                F-string cung c·∫•p c√°ch ƒë·ªãnh d·∫°ng chu·ªói hi·ªáu qu·∫£ v√† d·ªÖ hi·ªÉu, h·ªó tr·ª£ c·∫£ bi·ªÉu th·ª©c v√† h√†m.""")
    
    ex_4 = textwrap.dedent('''\
    #ai vietnam
    age = 36
    txt_1 = f"My name is Tom, I am {age}"
    print(txt_1)

    price = 59.7899999
    txt_2 = f"The price is {price:.2f} dollars"
    print(txt_2)                               
    ''')
    key = "ex_4"
    file_name = data_dir+key+".py"
    result, code_ex, key = ui.code_io(ex_4, key=key, file_name=file_name, type_out="python", show_now=True)
    ui.ai(result, code_ex, key)
    st.markdown(r"""## 5. Escape characters - C√°c k√Ω t·ª± ƒë·∫∑c bi·ªát""" )
    st.markdown(r"""Trong Python, c√°c k√Ω t·ª± escape ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ bi·ªÉu di·ªÖn c√°c k√Ω t·ª± ƒë·∫∑c bi·ªát trong chu·ªói m√† kh√¥ng th·ªÉ ƒë∆∞·ª£c 
                bi·ªÉu di·ªÖn tr·ª±c ti·∫øp. Theo ch·ª©c nƒÉng, ta ph√¢n th√†nh 3 lo·∫°i escape sau:
                
* Escape cho k√Ω t·ª± ƒë·∫∑c bi·ªát

* Escape cho k√Ω t·ª± ƒëi·ªÅu khi·ªÉn

* Escape cho k√Ω t·ª± unicode

* Escape cho k√Ω t·ª± Escape""")
    
    st.markdown(r"""### 5.1. Escape cho k√Ω t·ª± ƒë·∫∑c bi·ªát

- \': D√πng ƒë·ªÉ ch√®n d·∫•u nh√°y ƒë∆°n (') trong chu·ªói.
- \": D√πng ƒë·ªÉ ch√®n d·∫•u nh√°y k√©p (") trong chu·ªói.
- \ \\: D√πng ƒë·ªÉ ch√®n d·∫•u ch√©o ng∆∞·ª£c (\\) trong chu·ªói.""")
    
    ex_51 = textwrap.dedent('''\
    #ai vietnam
    # D·∫•u nh√°y ƒë∆°n (single quote)
    print('Escape cho d·∫•u nh√°y ƒë∆°n: It\'s a test.')

    # D·∫•u nh√°y k√©p (double quote)
    print("Escape cho d·∫•u nh√°y k√©p: He said, \"Hello\"")

    # K√Ω t·ª± g·∫°ch ch√©o ng∆∞·ª£c (backslash)
    print("Escape cho d·∫•u g·∫°ch ch√©o ng∆∞·ª£c: C:\\path\\to\\file")               
    ''')
    key = "ex_51"
    file_name = data_dir+key+".py"
    result, code_ex, key = ui.code_io(ex_51, key=key, file_name=file_name, type_out="python", show_now=True)
    ui.ai(result, code_ex, key)
    st.markdown(r"""### 5.2. Escape cho k√Ω t·ª± ƒëi·ªÅu khi·ªÉn

- \n: T·∫°o m·ªôt d√≤ng m·ªõi trong string
- \t: T·∫°o m·ªôt kho·∫£ng tr·∫Øng b·∫±ng tab(th√¥ng th∆∞·ªùng 1 tab b·∫±ng 4 kho·∫£ng tr·∫Øng) trong chu·ªói""")
    
    ex_52 = textwrap.dedent('''\
    #ai vietnam
    # D√≤ng m·ªõi (newline)
    print("Escape cho d√≤ng m·ªõi: First line.\nSecond line.")

    # Tab ngang (horizontal tab)
    print("Escape cho tab ngang: Hello\tWorld")               
    ''')
    key = "ex_52"
    file_name = data_dir+key+".py"
    result, code_ex, key = ui.code_io(ex_52, key=key, file_name=file_name, type_out="python", show_now=True)
    ui.ai(result, code_ex, key)
    st.markdown(r"""### 5.3. Escape cho k√Ω t·ª± unicode

K√Ω t·ª± Unicode l√† m·ªôt ti√™u chu·∫©n qu·ªëc t·∫ø ƒë·ªÉ ƒë·∫°i di·ªán cho c√°c k√Ω t·ª± v√† bi·ªÉu t∆∞·ª£ng t·ª´ c√°c ng√¥n ng·ªØ v√† vƒÉn h√≥a kh√°c nhau tr√™n th·∫ø gi·ªõi. D∆∞·ªõi ƒë√¢y l√† c√°ch ch√∫ng ta bi·ªÉu di·ªÖn ch√∫ng trong string.""")
    ex_53 = textwrap.dedent('''\
    #ai vietnam
    # K√Ω t·ª± Unicode c·ªßa chu·ªói "Hello"
    print("\u0048\u0065\u006C\u006C\u006F")

    # K√Ω t·ª± Unicode v·ªõi t√™n ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh
    print("Escape cho k√Ω t·ª± Unicode v·ªõi t√™n ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh: \N{cat}")
             
    ''')
    key = "ex_53"
    file_name = data_dir+key+".py"
    result, code_ex, key = ui.code_io(ex_53, key=key, file_name=file_name, type_out="python", show_now=True)
    ui.ai(result, code_ex, key)
    st.markdown(r"""### 5.4. Escape cho gi√° tr·ªã octal v√† hex

- \ooo : ooo l√† ba ch·ªØ s·ªë b√°t ph√¢n, ƒë·∫°i di·ªán cho gi√° tr·ªã ASCII c·ªßa k√Ω t·ª±
- \xhh : \x l√† ti·ªÅn t·ªë cho bi·∫øt r·∫±ng c√°c k√Ω t·ª± ti·∫øp theo l√† m√£ th·∫≠p l·ª•c ph√¢n, hh l√† hai ch·ªØ s·ªë th·∫≠p l·ª•c ph√¢n, m·ªói ch·ªØ s·ªë c√≥ th·ªÉ l√† t·ª´ 0-9 ho·∫∑c A-F (ho·∫∑c a-f).""")
    ex_54 = textwrap.dedent('''\
    #ai vietnam
    # K√Ω t·ª± v·ªõi gi√° tr·ªã octal(8, b√°t ph√¢n)
    print("Escape cho k√Ω t·ª± v·ªõi gi√° tr·ªã octal: \101\102\103")

    # K√Ω t·ª± v·ªõi gi√° tr·ªã hex(16, th·∫≠p l·ª•c ph√¢n)
    print("Escape cho k√Ω t·ª± v·ªõi gi√° tr·ªã hex: \x41\x42\x43")            
    ''')
    key = "ex_54"
    file_name = data_dir+key+".py"
    result, code_ex, key = ui.code_io(ex_54, key=key, file_name=file_name, type_out="python", show_now=True)
    ui.ai(result, code_ex, key)
    st.markdown(r"""D∆∞·ªõi ƒë√¢y l√† b·∫£ng t·ªïng h·ª£p c√°c k√Ω t·ª± escape trong Python, ƒë∆∞·ª£c ph√¢n lo·∫°i theo nh√≥m ch·ª©c nƒÉng v√† bao g·ªìm v√≠ d·ª• minh h·ªça cho t·ª´ng lo·∫°i:

| Nh√≥m               | K√Ω t·ª± Escape | M√¥ t·∫£                            | V√≠ d·ª•                                                       |
|--------------------|--------------|----------------------------------|-------------------------------------------------------------|
| K√Ω t·ª± ƒë·∫∑c bi·ªát     | `\'`         | D·∫•u nh√°y ƒë∆°n (')                 | `print('It\'s a test.')`                                    |
|                    | `\"`         | D·∫•u nh√°y k√©p (")                 | `print("He said, \"Hello\"")`                               |
|                    | `\\`         | D·∫•u g·∫°ch ch√©o ng∆∞·ª£c (\\)          | `print("Escape cho d·∫•u g·∫°ch ch√©o ng∆∞·ª£c: C:\\path\\to\\file")`|
| K√Ω t·ª± ƒëi·ªÅu khi·ªÉn   | `\n`         | D·∫•u xu·ªëng d√≤ng                   | `print("D√≤ng 1\nD√≤ng 2")`                                   |
|                    | `\t`         | Tab ngang                        | `print("Hello\tWorld")`                                     |
| K√Ω t·ª± Unicode      | `\uXXXX`     | K√Ω t·ª± Unicode| `print("\u0048\u0065\u006C\u006C\u006F")  # Hello`          |
|                    | `\N{name}`   | K√Ω t·ª± Unicode theo t√™n          | `print("\N{grinning face}")  # üòÄ`                          |
| K√Ω t·ª± s·ªë b√°t ph√¢n  | `\ooo`       | K√Ω t·ª± s·ªë b√°t ph√¢n (h·ªá 8)  | `print("\101\102\103")  # ABC`                              |
| K√Ω t·ª± s·ªë th·∫≠p l·ª•c ph√¢n | `\xhh`   | K√Ω t·ª± s·ªë th·∫≠p l·ª•c ph√¢n (h·ªá 16) | `print("\x41\x42\x43")  # ABC`                             |
""")
    st.markdown(r"""## 6. C√°c ph∆∞∆°ng th·ª©c bi·∫øn ƒë·ªïi String

C√≥ nhi·ªÅu ph∆∞∆°ng th·ª©c c√≥ s·∫µn cho String gi√∫p th·ª±c hi·ªán nhi·ªÅu thao t√°c x·ª≠ l√Ω n√≥ ƒë∆°n gi·∫£n m√† kh√¥ng ph·∫£i b·ªè nhi·ªÅu c√¥ng s·ª©c. ƒê·ªëi v·ªõi c√°ch s·ª≠ d·ª•ng ph∆∞∆°ng th·ª©c th√¨ ƒë·ªÅu c√≥ c·∫•u tr√∫c chung l√† `string_c·ªßa_b·∫°n.t√™n_ph∆∞∆°ng_th·ª©c()`

D·ª±a v√†o ch·ª©c nƒÉng c·ªßa c√°c ph∆∞∆°ng th·ª©c, ch√∫ng ƒë∆∞·ª£c chia th√†nh 3 nh√≥m:



1.   C√°c ph∆∞∆°ng th·ª©c li√™n quan ƒë·∫øn ki·ªÉm tra v√† so s√°nh
2.   C√°c ph∆∞∆°ng th·ª©c li√™n quan ƒë·∫øn chuy·ªÉn ƒë·ªïi v√† ƒë·ªãnh d·∫°ng
3.   C√°c ph∆∞∆°ng th·ª©c li√™n quan ƒë·∫øn t√¨m ki·∫øm v√† thay th·∫ø


""" )
    
    st.markdown(r"""### 6.1. C√°c ph∆∞∆°ng th·ª©c li√™n quan ƒë·∫øn ki·ªÉm tra v√† so s√°nh
- isalnum(): tr·∫£ v·ªÅ True n·∫øu t·∫•t c·∫£ c√°c k√Ω t·ª± l√† ch·ªØ v√† s·ªë, nghƒ©a l√† ch·ªØ c√°i trong b·∫£ng ch·ªØ c√°i (a-z) v√† s·ªë (0-9)
- isalpha(): Ki·ªÉm tra xem chu·ªói c√≥ ch·ª©a √≠t nh·∫•t m·ªôt k√Ω t·ª± v√† t·∫•t c·∫£ c√°c k√Ω t·ª± ƒë·ªÅu l√† ch·ªØ c√°i(a-z).
- isdigit(): Ki·ªÉm tra xem chu·ªói c√≥ ch·ª©a √≠t nh·∫•t m·ªôt k√Ω t·ª± v√† t·∫•t c·∫£ c√°c k√Ω t·ª± ƒë·ªÅu l√† s·ªë.
- islower(): Ki·ªÉm tra xem t·∫•t c·∫£ c√°c k√Ω t·ª± trong chu·ªói c√≥ ph·∫£i l√† ch·ªØ th∆∞·ªùng kh√¥ng.
- isupper(): Ki·ªÉm tra xem t·∫•t c·∫£ c√°c k√Ω t·ª± trong chu·ªói c√≥ ph·∫£i l√† ch·ªØ hoa kh√¥ng.""")
    
    ex_61 = textwrap.dedent('''\
    #ai vietnam
    # C√°c ph∆∞∆°ng th·ª©c li√™n quan ƒë·∫øn ki·ªÉm tra v√† so s√°nh
    example_string = "Hello123"
    print(example_string.isalnum())
    print(example_string.isalpha())
    print(example_string.isdigit())
    print(example_string.islower())
    print(example_string.isupper())            
    ''')
    key = "ex_61"
    file_name = data_dir+key+".py"
    result, code_ex, key = ui.code_io(ex_61, key=key, file_name=file_name, type_out="python", show_now=True)
    ui.ai(result, code_ex, key)
    st.markdown(r"""### 6.2. C√°c ph∆∞∆°ng th·ª©c li√™n quan ƒë·∫øn chuy·ªÉn ƒë·ªïi v√† ƒë·ªãnh d·∫°ng:
- capitalize(): Chuy·ªÉn ƒë·ªïi k√Ω t·ª± ƒë·∫ßu ti√™n c·ªßa chu·ªói th√†nh ch·ªØ hoa.
- lower(): Chuy·ªÉn ƒë·ªïi t·∫•t c·∫£ c√°c k√Ω t·ª± trong chu·ªói th√†nh ch·ªØ th∆∞·ªùng.
- upper(): Chuy·ªÉn ƒë·ªïi t·∫•t c·∫£ c√°c k√Ω t·ª± trong chu·ªói th√†nh ch·ªØ hoa.
- swapcase(): Chuy·ªÉn ƒë·ªïi ch·ªØ hoa th√†nh ch·ªØ th∆∞·ªùng v√† ng∆∞·ª£c l·∫°i.
- title(): Chuy·ªÉn ƒë·ªïi k√Ω t·ª± ƒë·∫ßu ti√™n c·ªßa m·ªói t·ª´ trong chu·ªói th√†nh ch·ªØ hoa.""")
    
    ex_62 = textwrap.dedent('''\
    #ai vietnam
    # C√°c ph∆∞∆°ng th·ª©c li√™n quan ƒë·∫øn chuy·ªÉn ƒë·ªïi v√† ƒë·ªãnh d·∫°ng
    example_string = "hello world"
    print(example_string.capitalize())
    print(example_string.lower())
    print(example_string.upper())
    print(example_string.swapcase())
    print(example_string.title()) 
    ''')
    key = "ex_62"
    file_name = data_dir+key+".py"
    result, code_ex, key = ui.code_io(ex_62, key=key, file_name=file_name, type_out="python", show_now=True)
    ui.ai(result, code_ex, key)
    st.markdown(r"""### 6.3. C√°c ph∆∞∆°ng th·ª©c li√™n quan ƒë·∫øn t√¨m ki·∫øm v√† thay th·∫ø:
- count(): ƒê·∫øm s·ªë l·∫ßn xu·∫•t hi·ªán c·ªßa m·ªôt chu·ªói con trong chu·ªói.
- find(): T√¨m v·ªã tr√≠ c·ªßa m·ªôt chu·ªói con trong chu·ªói. Tr·∫£ v·ªÅ ch·ªâ s·ªë ƒë·∫ßu ti√™n n·∫øu t√¨m th·∫•y, -1 n·∫øu kh√¥ng t√¨m th·∫•y.
- replace(): Thay th·∫ø m·ªôt chu·ªói con trong chu·ªói b·∫±ng m·ªôt chu·ªói con kh√°c.""")
    
    ex_63 = textwrap.dedent('''\
    #ai vietnam
    # C√°c ph∆∞∆°ng th·ª©c li√™n quan ƒë·∫øn t√¨m ki·∫øm v√† thay th·∫ø
    example_string = "apple orange apple banana"
    print(example_string.count("apple"))
    print(example_string.find("orange"))
    print(example_string.replace("apple", "pear"))
    ''')
    key = "ex_63"
    file_name = data_dir+key+".py"
    result, code_ex, key = ui.code_io(ex_63, key=key, file_name=file_name, type_out="python", show_now=True)
    ui.ai(result, code_ex, key)
    st.markdown(r"""D∆∞·ªõi ƒë√¢y l√† b·∫£ng t·ªïng h·ª£p c√°c ph∆∞∆°ng th·ª©c c·ªßa string trong Python:

| Nh√≥m        | Ph∆∞∆°ng th·ª©c | M√¥ t·∫£ ch·ª©c nƒÉng                                  | V√≠ d·ª•                                                         |
|-------------|-------------|---------------------------------------------------|---------------------------------------------------------------|
| Ki·ªÉm tra v√† so s√°nh | isalnum()   | Ki·ªÉm tra xem chu·ªói c√≥ ch·ª©a k√Ω t·ª± v√† s·ªë kh√¥ng    | `"Hello123".isalnum()` => `True`                              |
|             | isalpha()   | Ki·ªÉm tra xem chu·ªói ch·ªâ ch·ª©a k√Ω t·ª± kh√¥ng          | `"Hello".isalpha()` => `True`                                  |
|             | isdigit()   | Ki·ªÉm tra xem chu·ªói ch·ªâ ch·ª©a s·ªë kh√¥ng             | `"123".isdigit()` => `True`                                    |
|             | islower()   | Ki·ªÉm tra xem t·∫•t c·∫£ c√°c k√Ω t·ª± trong chu·ªói l√† ch·ªØ th∆∞·ªùng kh√¥ng | `"hello".islower()` => `True`                       |
|             | isupper()   | Ki·ªÉm tra xem t·∫•t c·∫£ c√°c k√Ω t·ª± trong chu·ªói l√† ch·ªØ hoa kh√¥ng    | `"HELLO".isupper()` => `True`                       |
| Chuy·ªÉn ƒë·ªïi v√† ƒë·ªãnh d·∫°ng | capitalize()| Chuy·ªÉn ƒë·ªïi k√Ω t·ª± ƒë·∫ßu ti√™n th√†nh ch·ªØ hoa          | `"hello".capitalize()` => `"Hello"`                           |
|             | lower()     | Chuy·ªÉn ƒë·ªïi t·∫•t c·∫£ c√°c k√Ω t·ª± th√†nh ch·ªØ th∆∞·ªùng    | `"Hello".lower()` => `"hello"`                                |
|             | upper()     | Chuy·ªÉn ƒë·ªïi t·∫•t c·∫£ c√°c k√Ω t·ª± th√†nh ch·ªØ hoa       | `"hello".upper()` => `"HELLO"`                                |
|             | swapcase()  | Chuy·ªÉn ƒë·ªïi ch·ªØ hoa th√†nh ch·ªØ th∆∞·ªùng v√† ng∆∞·ª£c l·∫°i | `"Hello World".swapcase()` => `"hELLO wORLD"`                 |
|             | title()     | Chuy·ªÉn ƒë·ªïi k√Ω t·ª± ƒë·∫ßu ti√™n c·ªßa m·ªói t·ª´ th√†nh ch·ªØ hoa | `"hello world".title()` => `"Hello World"`                   |
| T√¨m ki·∫øm v√† thay th·∫ø | count()     | ƒê·∫øm s·ªë l·∫ßn xu·∫•t hi·ªán c·ªßa m·ªôt chu·ªói con trong chu·ªói | `"apple".count("p")` => `2`                                   |
|             | find()      | T√¨m v·ªã tr√≠ c·ªßa m·ªôt chu·ªói con trong chu·ªói         | `"banana".find("na")` => `2`                                  |
|             | replace()   | Thay th·∫ø m·ªôt chu·ªói con b·∫±ng m·ªôt chu·ªói kh√°c      | `"apple".replace("p", "b")` => `"abble"`                       |
""")
    st.markdown(r"""## 7. C√°c h√†m trong String
                
Trong Python, ngo√†i c√°c ph∆∞∆°ng th·ª©c (methods) c√≥ th·ªÉ g·ªçi tr√™n ƒë·ªëi t∆∞·ª£ng chu·ªói, c√≤n c√≥ m·ªôt s·ªë h√†m t√≠ch h·ª£p (built-in functions) h·ªØu √≠ch cho vi·ªác l√†m vi·ªác v·ªõi chu·ªói.""" )
    
    st.markdown(r"""### 7.1. Nh√≥m ki·ªÉm tra string
C√°c h√†m n√†y ki·ªÉm tra c√°c thu·ªôc t√≠nh c·ªßa chu·ªói v√† tr·∫£ v·ªÅ gi√° tr·ªã boolean.

- len(): Tr·∫£ v·ªÅ ƒë·ªô d√†i c·ªßa chu·ªói.
- isinstance(): Ki·ªÉm tra n·∫øu m·ªôt ƒë·ªëi t∆∞·ª£ng l√† m·ªôt th·ªÉ hi·ªán c·ªßa m·ªôt l·ªõp c·ª• th·ªÉ.""")
    
    ex_71 = textwrap.dedent('''\
    #ai vietnam
    s = "Hello"
    print(f"len(s): {len(s)}")
    print(f"isinstance(s, str): {isinstance(s, str)}")
    ''')
    key = "ex_71"
    file_name = data_dir+key+".py"
    result, code_ex, key = ui.code_io(ex_71, key=key, file_name=file_name, type_out="python", show_now=True)
    ui.ai(result, code_ex, key)
    st.markdown(r"""### 7.2. Nh√≥m chuy·ªÉn ƒë·ªïi ki·ªÉu
C√°c h√†m n√†y chuy·ªÉn ƒë·ªïi chu·ªói sang ki·ªÉu d·ªØ li·ªáu kh√°c.

- str(): Chuy·ªÉn ƒë·ªïi m·ªôt ƒë·ªëi t∆∞·ª£ng th√†nh chu·ªói.
- int(): Chuy·ªÉn ƒë·ªïi chu·ªói th√†nh s·ªë nguy√™n.
- float(): Chuy·ªÉn ƒë·ªïi chu·ªói th√†nh s·ªë th·ª±c.""")
    
    ex_72 = textwrap.dedent('''\
    #ai vietnam
    num = 123
    s_num = str(num)
    print(f"str(num): {s_num}")

    s = "123"
    i_num = int(s)
    print(f"int(s): {i_num}")

    s_float = "123.45"
    f_num = float(s_float)
    print(f"float(s_float): {f_num}")
    ''')
    key = "ex_72"
    file_name = data_dir+key+".py"
    result, code_ex, key = ui.code_io(ex_72, key=key, file_name=file_name, type_out="python", show_now=True)
    ui.ai(result, code_ex, key)
    st.markdown(r"""### 7.3. Nh√≥m ƒë·ªãnh d·∫°ng c·∫•u tr√∫c
ƒê·ªãnh d·∫°ng chu·ªói theo m·ªôt c·∫•u tr√∫c c·ª• th·ªÉ""")
    
    ex_73 = textwrap.dedent('''\
    #ai vietnam
    s = "Hello, {}"
    print(s.format("world"))
    ''')
    key = "ex_73"
    file_name = data_dir+key+".py"
    result, code_ex, key = ui.code_io(ex_73, key=key, file_name=file_name, type_out="python", show_now=True)
    ui.ai(result, code_ex, key)
    st.markdown(r"""### 7.4. Nh√≥m m√£ h√≥a v√† gi·∫£i m√£
C√°c h√†m n√†y m√£ h√≥a v√† gi·∫£i m√£ chu·ªói.

- ord(): Tr·∫£ v·ªÅ gi√° tr·ªã Unicode c·ªßa m·ªôt k√Ω t·ª±.
- chr(): Tr·∫£ v·ªÅ k√Ω t·ª± t∆∞∆°ng ·ª©ng v·ªõi gi√° tr·ªã Unicode.""")
    
    ex_74 = textwrap.dedent('''\
    #ai vietnam
    c = 'a'
    unicode_value = ord(c)
    print(f"ord(c): {unicode_value}")

    code = 97
    character = chr(code)
    print(f"chr(code): {character}")
    ''')
    key = "ex_74"
    file_name = data_dir+key+".py"
    result, code_ex, key = ui.code_io(ex_74, key=key, file_name=file_name, type_out="python", show_now=True)
    ui.ai(result, code_ex, key)
    st.markdown(r"""### 7.5. Nh√≥m ki·ªÉm tra k√Ω t·ª±
C√°c h√†m n√†y ki·ªÉm tra k√Ω t·ª± trong chu·ªói.

- all(): Ki·ªÉm tra n·∫øu t·∫•t c·∫£ c√°c ph·∫ßn t·ª≠ c·ªßa m·ªôt iterable l√† True.
- any(): Ki·ªÉm tra n·∫øu b·∫•t k·ª≥ ph·∫ßn t·ª≠ n√†o c·ªßa m·ªôt iterable l√† True.""")
    
    ex_75 = textwrap.dedent('''\
    #ai vietnam
    s = "abc"
    all_alpha = all(c.isalpha() for c in s)
    print(f"all(c.isalpha() for c in s): {all_alpha}")

    s_with_digits = "abc123"
    any_digit = any(c.isdigit() for c in s_with_digits)
    print(f"any(c.isdigit() for c in s_with_digits): {any_digit}")     
    ''')
    key = "ex_75"
    file_name = data_dir+key+".py"
    result, code_ex, key = ui.code_io(ex_75, key=key, file_name=file_name, type_out="python", show_now=True)
    ui.ai(result, code_ex, key)
    st.markdown(r"""### 7.6. Nh√≥m thao t√°c tr√™n chu·ªói
C√°c h√†m n√†y thao t√°c tr·ª±c ti·∫øp tr√™n chu·ªói.

- max(): Tr·∫£ v·ªÅ k√Ω t·ª± l·ªõn nh·∫•t trong chu·ªói.
- min(): Tr·∫£ v·ªÅ k√Ω t·ª± nh·ªè nh·∫•t trong chu·ªói.
- sorted(): Tr·∫£ v·ªÅ m·ªôt danh s√°ch c√°c k√Ω t·ª± trong chu·ªói ƒë√£ ƒë∆∞·ª£c s·∫Øp x·∫øp.
- reversed(): Tr·∫£ v·ªÅ m·ªôt iterator v·ªõi c√°c k√Ω t·ª± trong chu·ªói theo th·ª© t·ª± ng∆∞·ª£c l·∫°i.""")
    
    ex_76 = textwrap.dedent('''\
    #ai vietnam
    s = "cba"
    max_char = max(s)
    print(f"max(s): {max_char}")

    min_char = min(s)
    print(f"min(s): {min_char}")

    sorted_chars = sorted(s)
    print(f"sorted(s): {sorted_chars}")

    reversed_s = ''.join(reversed(s))
    print(f"''.join(reversed(s)): {reversed_s}")
    ''')
    key = "ex_76"
    file_name = data_dir+key+".py"
    result, code_ex, key = ui.code_io(ex_76, key=key, file_name=file_name, type_out="python", show_now=True)
    ui.ai(result, code_ex, key)
    st.markdown(r"""| Nh√≥m             | H√†m          | M√¥ t·∫£ ch·ª©c nƒÉng                              | V√≠ d·ª•                                         |
|------------------|--------------|----------------------------------------------|----------------------------------------------|
| Ki·ªÉm tra chu·ªói   | `len()`      | Tr·∫£ v·ªÅ ƒë·ªô d√†i c·ªßa chu·ªói                      | `len("Hello")`  # Tr·∫£ v·ªÅ 5                   |
|                  | `isinstance()` | Ki·ªÉm tra n·∫øu m·ªôt ƒë·ªëi t∆∞·ª£ng l√† m·ªôt th·ªÉ hi·ªán c·ªßa m·ªôt l·ªõp c·ª• th·ªÉ | `isinstance("Hello", str)`  # Tr·∫£ v·ªÅ True  |
| Chuy·ªÉn ƒë·ªïi ki·ªÉu  | `str()`      | Chuy·ªÉn ƒë·ªïi m·ªôt ƒë·ªëi t∆∞·ª£ng th√†nh chu·ªói         | `str(123)`  # Tr·∫£ v·ªÅ '123'                   |
|                  | `int()`      | Chuy·ªÉn ƒë·ªïi chu·ªói th√†nh s·ªë nguy√™n             | `int("123")`  # Tr·∫£ v·ªÅ 123                   |
|                  | `float()`    | Chuy·ªÉn ƒë·ªïi chu·ªói th√†nh s·ªë th·ª±c               | `float("123.45")`  # Tr·∫£ v·ªÅ 123.45           |
| ƒê·ªãnh d·∫°ng        | `format()`   | ƒê·ªãnh d·∫°ng chu·ªói                              | `"Hello, {}".format("world")`  # Tr·∫£ v·ªÅ 'Hello, world' |
| M√£ h√≥a v√† gi·∫£i m√£ | `ord()`      | Tr·∫£ v·ªÅ gi√° tr·ªã Unicode c·ªßa m·ªôt k√Ω t·ª±         | `ord('a')`  # Tr·∫£ v·ªÅ 97                      |
|                  | `chr()`      | Tr·∫£ v·ªÅ k√Ω t·ª± t∆∞∆°ng ·ª©ng v·ªõi gi√° tr·ªã Unicode    | `chr(97)`  # Tr·∫£ v·ªÅ 'a'                      |
| Ki·ªÉm tra k√Ω t·ª±   | `all()`      | Ki·ªÉm tra n·∫øu t·∫•t c·∫£ c√°c ph·∫ßn t·ª≠ c·ªßa m·ªôt iterable l√† True | `all(c.isalpha() for c in "abc")`  # Tr·∫£ v·ªÅ True |
|                  | `any()`      | Ki·ªÉm tra n·∫øu b·∫•t k·ª≥ ph·∫ßn t·ª≠ n√†o c·ªßa m·ªôt iterable l√† True | `any(c.isdigit() for c in "abc123")`  # Tr·∫£ v·ªÅ True |
| Thao t√°c v·ªõi chu·ªói | `max()`     | Tr·∫£ v·ªÅ k√Ω t·ª± l·ªõn nh·∫•t trong chu·ªói            | `max("cba")`  # Tr·∫£ v·ªÅ 'c'                   |
|                  | `min()`      | Tr·∫£ v·ªÅ k√Ω t·ª± nh·ªè nh·∫•t trong chu·ªói            | `min("cba")`  # Tr·∫£ v·ªÅ 'a'                   |
|                  | `sorted()`   | Tr·∫£ v·ªÅ m·ªôt danh s√°ch c√°c k√Ω t·ª± trong chu·ªói ƒë√£ ƒë∆∞·ª£c s·∫Øp x·∫øp | `sorted("cba")`  # Tr·∫£ v·ªÅ ['a', 'b', 'c']  |
|                  | `reversed()` | Tr·∫£ v·ªÅ m·ªôt iterator v·ªõi c√°c k√Ω t·ª± trong chu·ªói theo th·ª© t·ª± ng∆∞·ª£c l·∫°i | `''.join(reversed("abc"))`  # Tr·∫£ v·ªÅ 'cba' |""")
    
    st.markdown(r"""## 8. C√°c l·ªói th∆∞·ªùng g·∫∑p khi l√†m vi·ªác v·ªõi String""" )
    st.markdown(r"""### 8.1 S·ª≠ d·ª•ng ch·ªâ s·ªë ngo√†i ph·∫°m vi (IndexError)""" )
    ex_81 = textwrap.dedent('''\
    #ai vietnam
    s = "hello"
    print(s[5])
    ''')
    key = "ex_81"
    file_name = data_dir+key+".py"
    result, code_ex, key = ui.code_io(ex_81, key=key, file_name=file_name, type_out="python", show_now=True)
    ui.ai(result, code_ex, key)
    st.markdown(r"""### 8.2 S·ª≠ d·ª•ng ph∆∞∆°ng th·ª©c tr√™n ki·ªÉu d·ªØ li·ªáu kh√¥ng ph√π h·ª£p (TypeError)""" )
    ex_82 = textwrap.dedent('''\
    #ai vietnam
    num = 123
    print(num.lower())  # TypeError: 'int' object has no attribute 'lower'
    ''')
    key = "ex_82"
    file_name = data_dir+key+".py"
    result, code_ex, key = ui.code_io(ex_82, key=key, file_name=file_name, type_out="python", show_now=True)
    ui.ai(result, code_ex, key)
    st.markdown(r"""### 8.3 S·ª≠ d·ª•ng sai c√∫ ph√°p (SyntaxError)""" )
    ex_83 = textwrap.dedent('''\
    #ai vietnam
    name = "ai viet nam'
    ''')
    key = "ex_83"
    file_name = data_dir+key+".py"
    result, code_ex, key = ui.code_io(ex_83, key=key, file_name=file_name, type_out="python", show_now=True)
    ui.ai(result, code_ex, key)
    
    st.success('Ch√∫c m·ª´ng b·∫°n ƒë√£ ho√†n th√†nh b√†i h·ªçc nha!', icon="‚úÖ")